// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ZnNr/GopherVault/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// CardStorage is an autogenerated mock type for the CardStorage type
type CardStorage struct {
	mock.Mock
}

// DeleteCards provides a mock function with given fields: ctx, cardRequest
func (_m *CardStorage) DeleteCards(ctx context.Context, cardRequest models.Card) error {
	ret := _m.Called(ctx, cardRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCards")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Card) error); ok {
		r0 = rf(ctx, cardRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCard provides a mock function with given fields: ctx, cardRequest
func (_m *CardStorage) GetCard(ctx context.Context, cardRequest models.Card) ([]models.Card, error) {
	ret := _m.Called(ctx, cardRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 []models.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Card) ([]models.Card, error)); ok {
		return rf(ctx, cardRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Card) []models.Card); ok {
		r0 = rf(ctx, cardRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Card) error); ok {
		r1 = rf(ctx, cardRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCard provides a mock function with given fields: ctx, card
func (_m *CardStorage) SaveCard(ctx context.Context, card models.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for SaveCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCard provides a mock function with given fields: ctx, cardUpdate
func (_m *CardStorage) UpdateCard(ctx context.Context, cardUpdate models.Card) error {
	ret := _m.Called(ctx, cardUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Card) error); ok {
		r0 = rf(ctx, cardUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCardStorage creates a new instance of CardStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardStorage {
	mock := &CardStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
