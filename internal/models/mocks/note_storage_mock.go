// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ZnNr/GopherVault/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NoteStorage is an autogenerated mock type for the NoteStorage type
type NoteStorage struct {
	mock.Mock
}

// DeleteNotes provides a mock function with given fields: ctx, noteRequest
func (_m *NoteStorage) DeleteNotes(ctx context.Context, noteRequest models.Note) error {
	ret := _m.Called(ctx, noteRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) error); ok {
		r0 = rf(ctx, noteRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotes provides a mock function with given fields: ctx, noteRequest
func (_m *NoteStorage) GetNotes(ctx context.Context, noteRequest models.Note) ([]models.Note, error) {
	ret := _m.Called(ctx, noteRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetNotes")
	}

	var r0 []models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) ([]models.Note, error)); ok {
		return rf(ctx, noteRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) []models.Note); ok {
		r0 = rf(ctx, noteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Note) error); ok {
		r1 = rf(ctx, noteRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveNote provides a mock function with given fields: ctx, note
func (_m *NoteStorage) SaveNote(ctx context.Context, note models.Note) error {
	ret := _m.Called(ctx, note)

	if len(ret) == 0 {
		panic("no return value specified for SaveNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNote provides a mock function with given fields: ctx, note
func (_m *NoteStorage) UpdateNote(ctx context.Context, note models.Note) error {
	ret := _m.Called(ctx, note)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNoteStorage creates a new instance of NoteStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteStorage {
	mock := &NoteStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
